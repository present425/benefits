{
  "name": "AI 혜택 추천 API (향후 구현)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "benefits/recommend",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook_recommend",
      "name": "Webhook: POST /benefits/recommend",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        400
      ],
      "webhookId": "benefits-recommend-api",
      "notes": "AI 기반 혜택 추천 API\n\nRequest Body:\n{\n  \"userId\": \"U001\",\n  \"location\": { \"lat\": 37.5665, \"lng\": 126.9780 },\n  \"context\": \"lunch\" | \"shopping\" | \"entertainment\"\n}"
    },
    {
      "parameters": {
        "jsCode": "// Request body 파싱\nconst body = $input.item.json.body || {};\n\nconst params = {\n  userId: body.userId || null,\n  location: body.location || null,\n  context: body.context || 'general',\n  requestedAt: new Date().toISOString()\n};\n\n// 검증\nif (!params.userId) {\n  throw new Error('userId is required');\n}\n\nconsole.log('=== AI Recommendation Request ===');\nconsole.log(`User ID: ${params.userId}`);\nconsole.log(`Context: ${params.context}`);\nif (params.location) {\n  console.log(`Location: ${params.location.lat}, ${params.location.lng}`);\n}\n\nreturn [{ json: params }];"
      },
      "id": "code_parse_request",
      "name": "Parse Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        400
      ],
      "notes": "요청 데이터 파싱 및 검증"
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "__rl": true,
          "value": "1bxVmRx_dIaQVIxkFEGGEErWDGwJ-XckETNNV6rLlRps",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "UserPayments",
          "mode": "name"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "UserID",
              "lookupValue": "={{ $json.userId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "sheets_user_payments",
      "name": "Google Sheets: User Payments",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [
        680,
        400
      ],
      "notes": "사용자 결제 이력 조회",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CREDENTIAL_ID",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "__rl": true,
          "value": "1bxVmRx_dIaQVIxkFEGGEErWDGwJ-XckETNNV6rLlRps",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Benefits",
          "mode": "name"
        },
        "options": {}
      },
      "id": "sheets_benefits",
      "name": "Google Sheets: Active Benefits",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [
        680,
        550
      ],
      "notes": "현재 활성 혜택 조회",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CREDENTIAL_ID",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "merge_data",
      "name": "Merge Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        900,
        475
      ],
      "notes": "결제 이력 + 혜택 데이터 병합"
    },
    {
      "parameters": {
        "jsCode": "// AI 분석을 위한 프롬프트 구성\nconst params = $node[\"Parse Request\"].json;\nconst payments = $node[\"Google Sheets: User Payments\"].all().map(item => item.json);\nconst benefits = $node[\"Google Sheets: Active Benefits\"].all().map(item => item.json);\n\n// 오늘 사용 가능한 혜택만 필터링\nconst today = new Date().toISOString().split('T')[0];\nconst availableBenefits = benefits.filter(b => {\n  const start = b.StartDate || b.startDate;\n  const end = b.EndDate || b.endDate;\n  const status = b.Status || b.status;\n  return status === 'active' && start <= today && end >= today;\n});\n\n// 결제 이력 분석\nconst categorySpending = {};\nlet totalSpent = 0;\n\npayments.forEach(p => {\n  const category = p.Category || p.category;\n  const amount = parseInt(p.Amount || p.amount || 0);\n  categorySpending[category] = (categorySpending[category] || 0) + amount;\n  totalSpent += amount;\n});\n\n// 선호 카테고리 추출 (상위 3개)\nconst topCategories = Object.entries(categorySpending)\n  .sort(([,a], [,b]) => b - a)\n  .slice(0, 3)\n  .map(([cat]) => cat);\n\n// AI 프롬프트 생성\nconst prompt = `당신은 혜택 추천 전문가입니다. 사용자의 결제 이력을 분석하여 최적의 혜택을 추천해주세요.\n\n## 사용자 정보\n- 컨텍스트: ${params.context}\n- 주로 이용하는 카테고리: ${topCategories.join(', ')}\n- 최근 30일 지출: ${totalSpent.toLocaleString()}원\n\n## 사용 가능한 혜택 (${availableBenefits.length}개)\n${availableBenefits.map((b, idx) => \n  `${idx + 1}. [${b.Provider || b.provider}] ${b.Name || b.name}\n   - 카테고리: ${b.Category || b.category}\n   - 혜택 가치: ${parseInt(b.Value || b.value || 0).toLocaleString()}원\n   - 조건: ${b.Conditions || b.conditions}\n   - 마감: ${b.EndDate || b.endDate} ${b.CloseTime || b.closeTime}`\n).join('\\n\\n')}\n\n## 요청사항\n1. 위 혜택 중 사용자에게 가장 적합한 TOP 3를 선정해주세요.\n2. 각 혜택을 추천하는 이유를 명확히 설명해주세요.\n3. 만약 1순위 혜택이 마감되었을 경우의 대체 플랜도 제시해주세요.\n4. JSON 형식으로 응답해주세요:\n\n{\n  \"recommendations\": [\n    {\n      \"rank\": 1,\n      \"benefitId\": \"혜택ID\",\n      \"benefitName\": \"혜택명\",\n      \"reason\": \"추천 이유 (50자 이내)\",\n      \"expectedValue\": 예상절감금액,\n      \"actionGuide\": \"사용 방법 안내\"\n    }\n  ],\n  \"alternativePlan\": \"대체 플랜 설명\",\n  \"insights\": \"사용자 소비 패턴 분석 (100자 이내)\"\n}`;\n\nreturn [{ json: { \n  prompt,\n  userId: params.userId,\n  context: params.context,\n  topCategories,\n  availableBenefitsCount: availableBenefits.length\n}}];"
      },
      "id": "code_build_prompt",
      "name": "Build AI Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        475
      ],
      "notes": "AI 분석용 프롬프트 생성"
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4"
            },
            {
              "name": "messages",
              "value": "={{ [{ role: 'system', content: 'You are a benefits recommendation expert. Always respond in valid JSON format.' }, { role: 'user', content: $json.prompt }] }}"
            },
            {
              "name": "temperature",
              "value": "0.7"
            },
            {
              "name": "max_tokens",
              "value": "1000"
            }
          ]
        },
        "options": {}
      },
      "id": "http_openai",
      "name": "OpenAI: Analyze",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        475
      ],
      "notes": "⚠️ OpenAI Credentials 설정 필요\n환경변수: OPENAI_API_KEY",
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAI account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// OpenAI 응답 파싱\nconst openaiResponse = $input.item.json;\nconst params = $node[\"Parse Request\"].json;\n\ntry {\n  const aiContent = openaiResponse.choices[0].message.content;\n  const aiResult = JSON.parse(aiContent);\n  \n  const response = {\n    userId: params.userId,\n    context: params.context,\n    recommendations: aiResult.recommendations || [],\n    alternativePlan: aiResult.alternativePlan || '',\n    insights: aiResult.insights || '',\n    generatedAt: new Date().toISOString(),\n    model: openaiResponse.model,\n    tokensUsed: openaiResponse.usage?.total_tokens || 0\n  };\n  \n  console.log('=== AI 추천 완료 ===');\n  console.log(`추천 개수: ${response.recommendations.length}개`);\n  console.log(`토큰 사용: ${response.tokensUsed}`);\n  \n  return [{ json: response }];\n} catch (error) {\n  console.error('AI 응답 파싱 실패:', error.message);\n  throw new Error('Failed to parse AI response');\n}"
      },
      "id": "code_parse_ai",
      "name": "Parse AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        475
      ],
      "notes": "AI 응답 파싱 및 포맷팅"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json; charset=utf-8"
              }
            ]
          },
          "responseCode": 200
        }
      },
      "id": "respond_success",
      "name": "Respond: Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1780,
        475
      ],
      "notes": "성공 응답"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": $json.message || \"Internal Server Error\", \"timestamp\": new Date().toISOString() } }}",
        "options": {
          "responseCode": 500
        }
      },
      "id": "respond_error",
      "name": "Respond: Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1340,
        675
      ],
      "notes": "에러 응답"
    }
  ],
  "connections": {
    "Webhook: POST /benefits/recommend": {
      "main": [
        [
          {
            "node": "Parse Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Request": {
      "main": [
        [
          {
            "node": "Google Sheets: User Payments",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google Sheets: Active Benefits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets: User Payments": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets: Active Benefits": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Build AI Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build AI Prompt": {
      "main": [
        [
          {
            "node": "OpenAI: Analyze",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI: Analyze": {
      "main": [
        [
          {
            "node": "Parse AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Response": {
      "main": [
        [
          {
            "node": "Respond: Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-13T00:00:00.000Z",
  "versionId": "1"
}

